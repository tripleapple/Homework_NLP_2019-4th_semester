
Q2. Answer following questions:
1. Why do we need machine learning methods instead of creating a complicated formula?

Ans: First of all, not all (actually very small part of) the complicated problems could finally be interpreted with a formula.
Secondly, a complicated formula could only solve the problems within very limited modles, and complicated problems are usually consist of many modles with complicated relations in between.
Finally, with machine learning, computer could gradually optimize the solutions with history data continuously input, which fomula could not enable.
2. What's the disadvantages of the 1st Random Choosen methods in our course?

Ans: The speed of the optimized solution convergence is too slow, because we haven't take advantage of the optimized value of k,b.
3. Is the 2nd method supervised direction better than 1st one? What's the disadvantages of the 2nd supversied directin method?

Ans: Easy to get the optimized solution converged quickly, but easily to get the local optimal solution instead of global optimal solution.
4. Why do we use Derivative / Gredient to fit a target function?

Ans: In order to get better solution within limited calculation steps in algorithm.
5. In the words 'Gredient Descent', what's the Gredient and what's the Descent?

Ans: 'Gredient'=giving a designed direct of solution set in the algorithm, direction which pushes the target function to optimized solution;
'Descent'=target function result will gradually falls into the target direction (either min or max).
6. What's the advantages of the 3rd gradient descent method compared to the previous methods?

Ans: 
7. Using the simple words to describe: What's the machine leanring.

Ans: 

Q3. Finish the search problem
#数据预处理
bj_subway_raw='''==1==苹果园,古城,八角游乐园,八宝山,玉泉路,五棵松,万寿路,公主坟,军事博物馆,木樨地,南礼士路,复兴门,西单,天安门西,天安门东,王府井,东单,建国门,永安里,国贸,大望路,四惠,四惠东,
==2==积水潭,鼓楼大街,安定门,雍和宫,东直门,东四十条,朝阳门,建国门,北京站,崇文门,前门,和平门宣武门,长椿街,复兴门,阜成门,车公庄,西直门,积水潭,
==3==田村,永定路,恩济东街,西钓鱼台,航天桥,白堆子,甘家口,展览路,阜成门,白塔寺,西四,南锣鼓巷,张自忠路,东四十条,工人体育场,团结湖,朝阳公园,石佛营,星火站,体育中心,平房村,东坝中街,东风,东坝,楼梓庄桥西,楼梓庄,高辛庄,
==4==安河桥北,北宫门,西苑,圆明园,北京大学东门,中关村,海淀黄庄,人民大学,魏公村,国家图书馆,动物园,西直门,新街口,平安里,西四,灵境胡同,西单,宣武门,菜市口,陶然亭,北京南站,马家堡,角门西,公益西桥,新宫,
==5==宋家庄,刘家窑,蒲黄榆,天坛东门,磁器口,崇文门,东单,灯市口,东四,张自忠路,北新桥,雍和宫,和平里北街,和平西桥,惠新西街南口,惠新西街北口,大屯路东,北苑路北,立水桥南,立水桥,天通苑南,天通苑,天通苑北,
==6==金安桥,苹果园,苹果园南路,西黄村,廖公庄,田村,海淀五路居,慈寿寺,花园桥,白石桥南,二里沟,车公庄西,车公庄,平安里,北海北,南锣鼓巷,东四,朝阳门,东大桥,呼家楼,金台路,十里堡,青年路,褡裢坡,黄渠,常营,草房,物资学院,北关,新华大街,玉带河大街,会展中心,郝家府,东部新城,东小营,
==7==北京西,湾子,达官营,广安门内,菜市口,虎坊桥,珠市口,桥湾,磁器口,广渠门内,广渠门外,双井,九龙山,大郊亭,百子湾,化工,南楼梓庄,欢乐谷景区,垡头,双合,焦化厂,
==8==朱辛庄,育知路,平西府,回龙观东大街,霍营广安门内,育新,西小口,永泰庄,林萃桥,森林公园南门,奥林匹克公园,奥体中心,北土城,安华桥,安德里北街,鼓楼大街,什刹海,南锣鼓巷,中国美术馆,珠市口,天桥,永定门外,木樨园,海户屯,大红门,大红门南,和义,东高地,火箭万源,五福堂,德茂,瀛海,瀛海,
==9==国家图书馆,白石桥南,白堆子,军事博物馆,北京西,六里桥东,六里桥,七里庄,丰台东大街,丰台南路,科怡路,丰台科技园,郭公庄,
==10==巴沟,苏州街,海淀黄庄,知春里,知春路,西土城,牡丹园,健德门,北土城,安贞门,惠新西街南口,芍药居,太阳宫,三元桥,亮马桥,农业展览馆,团结湖,呼家楼,金台夕照,国贸,双井,劲松,潘家园,十里河,分钟寺,成寿寺,宋家庄,石榴庄,大红门,角门东,角门西,草桥,纪家庙,首经贸,丰台,泥洼,西局,六里桥,莲花桥,公主坟,西钓鱼台,慈寿寺,车道沟,长春桥,火器营,巴沟,
==13==西直门,大钟寺,知春路,五道口,上地,西二旗,龙泽,回龙观,霍营,立水桥,北苑,望京西,芍药居,光熙门,柳芳,东直门,
==14==张郭庄,园博园,大瓦窑,郭庄子,大井,七里庄
==15==清华东路西口,六道口,北沙滩,奥林匹克公园,
==16==北安河,温阳路,稻香湖路,屯佃,
==八通线==四惠,四惠东,高碑店,传媒大学,双桥,管庄,八里桥,通州北苑,果园,九棵树,梨园,临河里,土桥,
==昌平线==西二旗,生命科学园,朱辛庄,巩华城,沙河,沙河高教园,南邵,
==大兴线==新宫,西红门,高米店北,高米店南,
==房山线==郭公庄,大葆台,稻田,长阳,广阳城,良乡大学城北,良乡大学城,良乡大学城西,良乡南关,苏庄,
==亦庄线==宋家庄,肖村,小红门,旧宫,亦庄桥,亦庄文化园,万源街,荣京东街,荣昌东街,同济南路,经海路,次渠南,次渠,亦庄火车站,
==机场线==东直门,三元桥,3号航楼,2号航楼,'''
bj_lines_raw=bj_subway_raw.split('\n')
import re
bj_line_stations={}
bj_lines=[]
bj_network={}
#bj_station_nodup=[]
for line_desc in bj_lines_raw:
    r=re.compile(r'==(\w+)==')
    m=r.search(line_desc)
    line=m.groups(1)[0]
    line_stations=re.findall('(\w+),',line_desc)
    bj_lines.append(line)
    bj_line_stations[line]=line_stations
for line_key in bj_lines:
    templist=bj_line_stations[line_key]
    a=len(templist)
    for i in range(a):
        point=templist[i]
        if i-1>=0:
            if bj_network.get(point,-1)==-1:
                bj_network[point]=[bj_line_stations[line_key][i-1]]      
            else:
                bj_network[point].append(bj_line_stations[line_key][i-1])
        if i+1<a:
            if bj_network.get(point,-1)==-1:
                bj_network[point]=[bj_line_stations[line_key][i+1]]
            else:
                bj_network[point].append(bj_line_stations[line_key][i+1])
print(bj_network)

def find_connection(start,end,network):
    routes=[[start]]
    visited=[start]
    print_route=""
    while routes:
        route=routes.pop()
        frontier=route[-1]
        for new_point in network[frontier]:
            if new_point not in visited:
                routes.append(route+[new_point])
                visited.append(new_point)
                if new_point==end:
                    for passby_points in route:
                        print_route=print_route+passby_points+'-->'
                    print_route=print_route+new_point
                    return print_route
        #print(routes)
            
        
find_connection('丰台科技园','海淀五路居',bj_network)

#Test result:
'丰台科技园-->科怡路-->丰台南路-->丰台东大街-->七里庄-->六里桥-->莲花桥-->公主坟-->西钓鱼台-->慈寿寺-->海淀五路居'
